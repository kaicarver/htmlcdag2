#!/usr/bin/perl
# produire JUSTE des slides style S5 à partir de texte

# usage: ./slidize.pl pres_skel.html plan_presentation_orale.txt > slides.html

# voir aussi htmlize.pl pour une génération de doc HTML complet

use 5.010;
use strict;
use warnings;
use open qw(:std :utf8); # this is required to read utf8 with <>

my $datestring = localtime();
my $skel = shift @ARGV;
my $generation_info = "slides generated by '$0 $skel $ARGV[0]' on $datestring";
my $level = 0;

# slurp the surrounding HTML
my $contents = do { local(@ARGV, $/) = $skel; <> };
my ($begin, $end) = split /\[GENERATED SLIDES\]/, $contents;

print $begin;

print <<END;
<!-- begin $generation_info -->
END
while (<>) {
  if (/^\S/) {
    $level = 0;
    chomp;
    print <<END;

<div class="slide">
<h1>$_</h1>
END
  } elsif (/^\s{2}(\S.*)$/) {
    handle_ul($level, 2);
    $level = 2;
    chomp;
    print <<END;
<p>$1</p>
END
  } elsif (/^\s{4}(\S.*)$/) {
    handle_ul($level, 4);
    $level = 4;
    print <<END;
  <li>$1</li>
END
  } elsif (/^\s+\S/) {
    $level = 8; # 8 standing for infinity, ie all levels other than the previous
    print 8,$_;
  } elsif (/^$/) {
    handle_ul($level, 0);
    $level = 0;
    print "?",$_;
  }
}

close_all();

print <<END;
<!--   end $generation_info -->
END

print $end;

sub handle_ul {
  my ($oldlevel, $newlevel) = @_;
  if ($oldlevel < $newlevel) {
    # print "==> open oldlevel=$oldlevel newlevel=$newlevel\n";
    if ($newlevel > 2) {
      print <<END;
<ul>
END
    }
  } elsif ($newlevel < $oldlevel) {
    # print "<== clos oldlevel=$oldlevel newlevel=$newlevel\n";
    print <<END;
</ul>
END
  }
}


sub close_all {
    print <<END;
</ul>
END
}
